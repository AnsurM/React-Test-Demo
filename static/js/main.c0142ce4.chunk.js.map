{"version":3,"sources":["components/QuizHandler/ProgressBar.js","components/QuizHandler/Questionnaire/QuestionStatistics/index.js","components/QuizHandler/Questionnaire/QuestionForm/OptionsList/index.js","components/QuizHandler/Questionnaire/QuestionForm/index.js","components/QuizHandler/Questionnaire/index.js","components/QuizHandler/ScorePredictor.js","components/QuizHandler/index.js","App.js","reportWebVitals.js","index.js"],"names":["QuizProgressBar","progress","attempted","total","ProgressBar","now","diffRating","easy","medium","hard","QuestionStatistics","questionNo","totalQuestions","question","category","difficulty","useState","difficultyRating","setDifficultyRating","useEffect","Container","Row","Col","count","value","size","activeColor","edit","isHalf","OptionsList","options","onClickOption","disabled","map","option","className","Button","name","variant","onClick","QuestionForm","correct_answer","incorrect_answers","isLastQuestion","onSelectAnswer","onClickNextQuestion","split","selectedAnswer","setSelectedAnswer","e","answer","target","Questionnaire","questions","onUpdateQuizProgress","onEndQuiz","convertQuestionToReadableFormat","tempQuestion","Object","entries","key","decodeURIComponent","correct","quizProgress","setQuizProgess","currentQuestionIndex","setCurrentQuestionIndex","currentQuestion","setCurrentQuestion","qp","length","isAnswerCorrect","QuizScorePredictor","lowest","current","highest","scorePredictions","setScorePredictions","parseInt","getLowestPossibleScore","getCurrentScore","getHighestPossibleScore","require","QuizHandler","setProgress","quizEnded","setQuizEnded","fluid","Jumbotron","prog","ScorePredictor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0142ce4.chunk.js","sourcesContent":["import ProgressBar from \"react-bootstrap/ProgressBar\";\r\n\r\nconst QuizProgressBar = ({ progress: { attempted, total } }) => {\r\n  return <ProgressBar now={(attempted / total) * 100} />;\r\n};\r\n\r\nexport default QuizProgressBar;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport ReactStars from \"react-rating-stars-component\";\r\n\r\nconst diffRating = { easy: 1, medium: 2, hard: 3 };\r\n\r\nexport default function QuestionStatistics({\r\n  questionNo,\r\n  totalQuestions,\r\n  question: { category, difficulty },\r\n}) {\r\n  const [difficultyRating, setDifficultyRating] = useState(\r\n    diffRating[difficulty]\r\n  );\r\n  useEffect(() => {\r\n    setDifficultyRating(diffRating[difficulty]);\r\n  }, [difficulty]);\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <h1>{`Question ${questionNo} of ${totalQuestions}`}</h1>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <h4>{category}</h4>\r\n        </Col>\r\n      </Row>\r\n      <Row key={difficultyRating}>\r\n        <Col>\r\n          <ReactStars\r\n            count={3}\r\n            value={difficultyRating}\r\n            size={24}\r\n            activeColor=\"#ffd700\"\r\n            edit={false}\r\n            isHalf={false}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n","import { Row, Col } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default function OptionsList({ options, onClickOption, disabled }) {\r\n  return (\r\n    <Row>\r\n      {options.map((option) => (\r\n        <Col className=\"col-md-6\" key={option}>\r\n          <Row>\r\n            <Col className=\"col-md-1\"></Col>\r\n            <Col className=\"col-md-10\">\r\n              <Button\r\n                className=\"optionButton my-3\"\r\n                name={option}\r\n                variant=\"primary\"\r\n                onClick={onClickOption}\r\n                disabled={disabled}\r\n              >\r\n                {option}\r\n              </Button>\r\n            </Col>\r\n            <Col className=\"col-md-1\"></Col>\r\n          </Row>\r\n        </Col>\r\n      ))}\r\n    </Row>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport OptionsList from \"./OptionsList\";\r\n\r\nexport default function QuestionForm({\r\n  question: { question, correct_answer, incorrect_answers },\r\n  isLastQuestion,\r\n  onSelectAnswer,\r\n  onClickNextQuestion,\r\n}) {\r\n  const options = [correct_answer, ...incorrect_answers.split(\",\")];\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n\r\n  const onClickOption = (e) => {\r\n    const answer = e.target.name;\r\n    setSelectedAnswer(answer);\r\n    onSelectAnswer(answer === correct_answer);\r\n  };\r\n\r\n  const onClickNext = () => {\r\n    setSelectedAnswer(null);\r\n    onClickNextQuestion();\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <h3>{question}</h3>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mt-4\">\r\n        <Col>\r\n          <OptionsList\r\n            options={options}\r\n            onClickOption={onClickOption}\r\n            disabled={!!selectedAnswer}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Container className={!selectedAnswer ? \"d-none\" : \"\"}>\r\n        <Row className=\"text-center mt-5 mr-5\">\r\n          <Col>\r\n            <h4>{selectedAnswer === correct_answer ? \"Correct!\" : \"Sorry!\"}</h4>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"text-center mt-2 mr-5\">\r\n          <Col>\r\n            <Button onClick={onClickNext}>\r\n              {isLastQuestion ? \"End Quiz\" : \"Next Question\"}\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Container>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport QuestionStatistics from \"./QuestionStatistics\";\r\nimport QuestionForm from \"./QuestionForm\";\r\n\r\nconst Questionnaire = ({ questions, onUpdateQuizProgress, onEndQuiz }) => {\r\n  const convertQuestionToReadableFormat = (question) => {\r\n    let tempQuestion = {};\r\n    for (const [key, value] of Object.entries(question)) {\r\n      tempQuestion[key] = decodeURIComponent(value);\r\n    }\r\n    return tempQuestion;\r\n  };\r\n\r\n  const [quizProgress, setQuizProgess] = useState({\r\n    total: 0,\r\n    attempted: 0,\r\n    correct: 0,\r\n  });\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (questions && !currentQuestion) {\r\n      setCurrentQuestion(\r\n        convertQuestionToReadableFormat(questions[currentQuestionIndex])\r\n      );\r\n\r\n      let qp = { ...quizProgress };\r\n      qp.total = questions.length;\r\n      setQuizProgess(qp);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [questions]);\r\n\r\n  useEffect(() => {\r\n    setCurrentQuestion(\r\n      convertQuestionToReadableFormat(questions[currentQuestionIndex])\r\n    );\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentQuestionIndex]);\r\n\r\n  useEffect(() => {\r\n    onUpdateQuizProgress(quizProgress);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [quizProgress]);\r\n\r\n  const onSelectAnswer = (isAnswerCorrect) => {\r\n    let qp = { ...quizProgress };\r\n    qp.attempted += 1;\r\n    if (isAnswerCorrect) qp.correct += 1;\r\n    setQuizProgess(qp);\r\n  };\r\n\r\n  const onClickNextQuestion = () => {\r\n    if (currentQuestionIndex < questions.length - 1)\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    else onEndQuiz();\r\n  };\r\n\r\n  return currentQuestion ? (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <QuestionStatistics\r\n            questionNo={currentQuestionIndex + 1}\r\n            totalQuestions={questions.length}\r\n            question={currentQuestion}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <br />\r\n      <Row>\r\n        <Col>\r\n          <QuestionForm\r\n            question={currentQuestion}\r\n            isLastQuestion={currentQuestionIndex === questions.length - 1}\r\n            onSelectAnswer={onSelectAnswer}\r\n            onClickNextQuestion={onClickNextQuestion}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <h2>Loading....</h2>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Questionnaire;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\n\r\nconst QuizScorePredictor = ({ progress }) => {\r\n  const [scorePredictions, setScorePredictions] = useState({\r\n    lowest: 0,\r\n    current: 0,\r\n    highest: 100,\r\n  });\r\n\r\n  const getLowestPossibleScore = ({ correct, total }) =>\r\n    parseInt((correct / total) * 100);\r\n  const getCurrentScore = ({ attempted, correct }) =>\r\n    parseInt((correct / attempted) * 100);\r\n  const getHighestPossibleScore = ({ attempted, correct, total }) =>\r\n    parseInt(((correct + (total - attempted)) / total) * 100);\r\n\r\n  useEffect(() => {\r\n    if (!progress || !progress.attempted) return;\r\n\r\n    let lowest = getLowestPossibleScore(progress);\r\n    let current = getCurrentScore(progress);\r\n    let highest = getHighestPossibleScore(progress);\r\n    let newScorePredictions = {\r\n      lowest,\r\n      current,\r\n      highest,\r\n    };\r\n    setScorePredictions(newScorePredictions);\r\n  }, [progress]);\r\n\r\n  return (\r\n    <Row className=\"stickyScoreIndicator\">\r\n      <Col>\r\n        <Row>\r\n          <Col>\r\n            <p className=\"text-left\">{`Score: ${scorePredictions.current}%`}</p>\r\n          </Col>\r\n          <Col>\r\n            <p className=\"text-right\">{`Max Score: ${scorePredictions.highest}%`}</p>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <ProgressBar>\r\n              <ProgressBar\r\n                variant=\"info\"\r\n                now={scorePredictions.lowest}\r\n                key={1}\r\n              />\r\n              <ProgressBar\r\n                variant=\"warning\"\r\n                now={scorePredictions.current - scorePredictions.lowest}\r\n                key={2}\r\n              />\r\n              <ProgressBar\r\n                variant=\"success\"\r\n                now={\r\n                  scorePredictions.highest === scorePredictions.current\r\n                    ? 0\r\n                    : scorePredictions.highest - scorePredictions.current\r\n                }\r\n                key={3}\r\n              />\r\n            </ProgressBar>\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default QuizScorePredictor;\r\n","import { useState } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\n\r\nimport ProgressBar from \"./ProgressBar\";\r\nimport Questionnaire from \"./Questionnaire\";\r\nimport ScorePredictor from \"./ScorePredictor\";\r\n\r\nconst questions = require(\"../../questions.json\");\r\n\r\nconst QuizHandler = () => {\r\n  const [progress, setProgress] = useState({});\r\n  const [quizEnded, setQuizEnded] = useState(false);\r\n\r\n  const onUpdateQuizProgress = (prog) => {\r\n    setProgress(prog);\r\n  };\r\n\r\n  const onEndQuiz = () => setQuizEnded(true);\r\n\r\n  return (\r\n    <Container fluid>\r\n      {quizEnded ? (\r\n        <Row>\r\n          <Col>\r\n            <Jumbotron fluid>\r\n              <Container>\r\n                <h1>Congratulations on completing the quiz!</h1>\r\n                <p>\r\n                  {`You have scored ${\r\n                    (progress.correct / progress.total) * 100\r\n                  }% marks!`}\r\n                </p>\r\n              </Container>\r\n            </Jumbotron>\r\n          </Col>\r\n        </Row>\r\n      ) : (\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <ProgressBar progress={progress} />\r\n            </Col>\r\n          </Row>\r\n          <br />\r\n          <Row>\r\n            <Col className=\"col-md-2\"></Col>\r\n            <Col>\r\n              <Questionnaire\r\n                questions={questions}\r\n                onUpdateQuizProgress={onUpdateQuizProgress}\r\n                onEndQuiz={onEndQuiz}\r\n              />\r\n            </Col>\r\n            <Col className=\"col-md-2\"></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <ScorePredictor progress={progress} />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default QuizHandler;\r\n","import QuizHandler from \"./components/QuizHandler\"\nimport { Container } from \"react-bootstrap\";\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Container>\n        <QuizHandler />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}